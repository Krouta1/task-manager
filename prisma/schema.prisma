// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workflows     Workflow[]
  webhooks      Webhook[]
  tasks         Task[] @relation("TaskAssignee")
  projects      Project[]
  comments      Comment[]
  workspaces    Workspace[] @relation("WorkspaceUsers")

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Workflow {
  id        String    @id @default(cuid())
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  statuses  Status[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  workspaceId String
  workspace  Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model Status {
  id         String   @id @default(cuid())
  name       String
  position   Int
  workflowId String
  workflow   Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tasks      Task[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("statuses")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  statusId    String
  status      Status   @relation(fields: [statusId], references: [id], onDelete: SetNull)
  assigneeId  String?
  assignee    User?    @relation(name: "TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  boardId     String
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflowId  String
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tasks       Task[]
  boards      Board[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace  Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Webhook {
  id        String   @id @default(cuid())
  url       String
  event     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("webhooks")
}

model Workspace {
  id        String    @id @default(cuid())
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects  Project[]
  workflows Workflow[]
  users     User[]    @relation("WorkspaceUsers", references: [id], through: WorkspaceUser)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("workspaces")
}

model WorkspaceUser {
  userId      String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([userId, workspaceId])
  @@map("workspace_users")
}

model Board {
  id        String    @id @default(cuid())
  name      String
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("boards")
}
