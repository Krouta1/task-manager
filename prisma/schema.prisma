// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  workspaces      Workspace[]
  sentInvitations Invitation[]    @relation("SentInvitations")
  WorkspaceUser   WorkspaceUser[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum WorkspaceIcon {
  KeyRound
  Zap
  House
  DollarSign
  UserRound
  FolderClosed
  Sun
  MessageCircle
  Gem
  Flag
  Heart
  Settings
  Crown
  Flame
  Pen
  Earth
}

model Workspace {
  id            String          @id @default(cuid())
  name          String
  icon          WorkspaceIcon   @default(KeyRound)
  iconColor     String?         @default("purple")
  isMain        Boolean         @default(false)
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitations   Invitation[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  WorkspaceUser WorkspaceUser[]

  @@map("workspaces")
}

model WorkspaceUser {
  userId      String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([userId, workspaceId])
  @@map("workspace_users")
}

model Board {
  id         String   @id @default(cuid())
  name       String
  isSharable Boolean  @default(true)
  isFavorite Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("boards")
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  senderId    String
  sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "SentInvitations")
  status      String    @default("pending") // pending, accepted, rejected
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("invitations")
}
